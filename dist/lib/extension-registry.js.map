{"version":3,"sources":["../lib/extension-registry.ts"],"names":[],"mappings":"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","file":"extension-registry.js","sourcesContent":["import Emitter from 'events';\nimport ExtensionWorker, { WorkerEvents } from './extension-worker';\nimport {\n\tExtensionDataTransmittedEvent,\n\tExtensionErrorEvent,\n\tExtensionErrorLogEvent,\n\tExtensionEventTypes,\n\tExtensionLogEvent,\n\tExtensionPointId,\n\tExtensionUnregisteredEvent,\n\tIExtensionPoint,\n\tIExtensionRegistry,\n\tExtensionRegisteredEvent,\n\tExtensionBrowserOperationEvent,\n\tExtensionTestLogEvent\n} from './types';\n\nexport type GenericEventHandler = (...args: any[]) => void;\ntype RegisteredExtension = {\n\tdefinition: IExtensionPoint;\n\tworker: ExtensionWorker;\n\tstarted: boolean;\n};\nclass ExtensionRegistry implements IExtensionRegistry {\n\tprivate emitter: Emitter = new Emitter();\n\tprivate extensions: Array<RegisteredExtension> = [];\n\n\tconstructor() {\n\t\tprocess\n\t\t\t.once('exit', () => this.shutdownAllExtensions())\n\t\t\t.once('SIGINT', () => this.shutdownAllExtensions())\n\t\t\t.once('SIGTERM', () => this.shutdownAllExtensions());\n\t}\n\tprotected getEmitter(): Emitter {\n\t\treturn this.emitter;\n\t}\n\tfindExtensionById(extensionId: ExtensionPointId): RegisteredExtension | undefined {\n\t\treturn this.extensions.find(extension => extension.definition.getId() === extensionId);\n\t}\n\tisExtensionStarted(extensionId: ExtensionPointId): boolean {\n\t\tconst extension = this.extensions.find(\n\t\t\textension => extension.definition.getId() === extensionId\n\t\t);\n\t\tif (!extension) {\n\t\t\t// not found, not started\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn !!extension.started;\n\t\t}\n\t}\n\tasync startup(extensionPoints: Array<IExtensionPoint>): Promise<void> {\n\t\t// build registered extensions\n\t\tthis.extensions = extensionPoints.map(extensionPoint => {\n\t\t\treturn {\n\t\t\t\tdefinition: extensionPoint,\n\t\t\t\tworker: new ExtensionWorker(),\n\t\t\t\tstarted: false\n\t\t\t} as RegisteredExtension;\n\t\t});\n\n\t\t// listen all child processes\n\t\t// console.log(`main process pid[${process.pid}]`);\n\t\tawait Promise.all(this.extensions.map(this.doStartupExtension));\n\t}\n\tasync startupExtension(extensionPoint: IExtensionPoint): Promise<void> {\n\t\tlet extension: RegisteredExtension | undefined = this.findExtensionById(\n\t\t\textensionPoint.getId()\n\t\t);\n\t\tif (!extension) {\n\t\t\textension = {\n\t\t\t\tdefinition: extensionPoint,\n\t\t\t\tworker: new ExtensionWorker(),\n\t\t\t\tstarted: false\n\t\t\t} as RegisteredExtension;\n\t\t\tthis.extensions.push(extension);\n\t\t}\n\t\tif (!extension.started) {\n\t\t\treturn await this.doStartupExtension(extension);\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\tprivate doStartupExtension = async (extension: RegisteredExtension): Promise<void> => {\n\t\tconst { definition, worker } = extension;\n\t\tconst extensionId = definition.getId();\n\t\tworker\n\t\t\t.on(WorkerEvents.REGISTERED, (error?: Error) => {\n\t\t\t\tconst extension = this.extensions.find(\n\t\t\t\t\textension => extension.definition.getId() === extensionId\n\t\t\t\t);\n\t\t\t\tif (!extension) {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`Unknown extension[id=${extensionId}] register request received, ignored.`\n\t\t\t\t\t);\n\t\t\t\t} else if (error) {\n\t\t\t\t\t// failed to activate extension, shutdown worker\n\t\t\t\t\tconsole.error('registered on error', error);\n\t\t\t\t\textension.worker.terminate();\n\t\t\t\t\textension.started = false;\n\t\t\t\t\tthis.getEmitter().emit(ExtensionEventTypes.REGISTERED, {\n\t\t\t\t\t\ttype: ExtensionEventTypes.REGISTERED,\n\t\t\t\t\t\textensionId,\n\t\t\t\t\t\terror\n\t\t\t\t\t} as ExtensionRegisteredEvent);\n\t\t\t\t} else {\n\t\t\t\t\textension.started = true;\n\t\t\t\t\tthis.getEmitter().emit(ExtensionEventTypes.REGISTERED, {\n\t\t\t\t\t\ttype: ExtensionEventTypes.REGISTERED,\n\t\t\t\t\t\textensionId\n\t\t\t\t\t} as ExtensionRegisteredEvent);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.on(WorkerEvents.EXITED, (code: number, signal: string, expected: boolean): void => {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`Extension[id=${extensionId}, name=${definition.getName()}] terminated[code=${code}, signal=${signal}].`\n\t\t\t\t);\n\t\t\t\textension.started = false;\n\t\t\t\tthis.getEmitter().emit(ExtensionEventTypes.UNREGISTERED, {\n\t\t\t\t\ttype: ExtensionEventTypes.UNREGISTERED,\n\t\t\t\t\textensionId\n\t\t\t\t} as ExtensionUnregisteredEvent);\n\t\t\t})\n\t\t\t.on(WorkerEvents.LOG, (data: any): void => {\n\t\t\t\tthis.getEmitter().emit(ExtensionEventTypes.LOG, {\n\t\t\t\t\ttype: ExtensionEventTypes.LOG,\n\t\t\t\t\textensionId,\n\t\t\t\t\tdata\n\t\t\t\t} as ExtensionLogEvent);\n\t\t\t})\n\t\t\t.on(WorkerEvents.ERROR_LOG, (data: any): void => {\n\t\t\t\tthis.getEmitter().emit(ExtensionEventTypes.ERROR_LOG, {\n\t\t\t\t\ttype: ExtensionEventTypes.ERROR_LOG,\n\t\t\t\t\textensionId,\n\t\t\t\t\tdata\n\t\t\t\t} as ExtensionErrorLogEvent);\n\t\t\t})\n\t\t\t.on(WorkerEvents.ERROR, (error: Error): void => {\n\t\t\t\tthis.getEmitter().emit(ExtensionEventTypes.ERROR, {\n\t\t\t\t\ttype: ExtensionEventTypes.ERROR,\n\t\t\t\t\textensionId,\n\t\t\t\t\terror\n\t\t\t\t} as ExtensionErrorEvent);\n\t\t\t})\n\t\t\t.on(WorkerEvents.DATA, (data: any): void => {\n\t\t\t\tthis.getEmitter().emit(ExtensionEventTypes.DATA_TRANSMITTED, {\n\t\t\t\t\ttype: ExtensionEventTypes.DATA_TRANSMITTED,\n\t\t\t\t\textensionId,\n\t\t\t\t\tdata\n\t\t\t\t} as ExtensionDataTransmittedEvent);\n\t\t\t})\n\t\t\t.on(WorkerEvents.BROWSER, (data: any): void => {\n\t\t\t\tthis.getEmitter().emit(ExtensionEventTypes.BROWSER_OPERATION, {\n\t\t\t\t\ttype: ExtensionEventTypes.BROWSER_OPERATION,\n\t\t\t\t\textensionId,\n\t\t\t\t\tdata\n\t\t\t\t} as ExtensionBrowserOperationEvent);\n\t\t\t})\n\t\t\t.on(WorkerEvents.TEST_LOG, (data: any): void => {\n\t\t\t\tthis.getEmitter().emit(ExtensionEventTypes.TEST_LOG, {\n\t\t\t\t\ttype: ExtensionEventTypes.TEST_LOG,\n\t\t\t\t\textensionId,\n\t\t\t\t\tdata\n\t\t\t\t} as ExtensionTestLogEvent);\n\t\t\t});\n\t\tawait worker.start(definition);\n\t\tconsole.log(`Extension[${extensionId}] started successfully by worker.`);\n\t};\n\n\tshutdownExtension(extensionId: ExtensionPointId): void {\n\t\tconst extension = this.findExtensionById(extensionId);\n\t\tif (extension) {\n\t\t\textension.worker.terminate();\n\t\t\textension.started = false;\n\t\t}\n\t}\n\tshutdownAllExtensions(): void {\n\t\tthis.extensions.forEach(extension => {\n\t\t\textension.worker.terminate();\n\t\t\textension.started = false;\n\t\t});\n\t}\n\tdestroy(): void {\n\t\tthis.shutdownAllExtensions();\n\t}\n\tonce(event: ExtensionEventTypes, handler: GenericEventHandler): this {\n\t\tthis.getEmitter().once(event, handler);\n\t\treturn this;\n\t}\n\ton(event: ExtensionEventTypes, handler: GenericEventHandler): this {\n\t\tthis.getEmitter().on(event, handler);\n\t\treturn this;\n\t}\n\toff(event: ExtensionEventTypes, handler: GenericEventHandler): this {\n\t\tthis.getEmitter().off(event, handler);\n\t\treturn this;\n\t}\n\tsendMessage(extensionId: ExtensionPointId, data: any): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tconst extension = this.findExtensionById(extensionId);\n\t\t\tif (extension) {\n\t\t\t\tconst worker = extension.worker;\n\t\t\t\tif (worker) {\n\t\t\t\t\tworker\n\t\t\t\t\t\t.sendMessage(extensionId, data)\n\t\t\t\t\t\t.then(() => resolve())\n\t\t\t\t\t\t.catch((e: Error) => reject(e));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treject(new Error(`Worker not found of extension[${extensionId}].`));\n\t\t\t}\n\t\t});\n\t}\n\tsendBrowserOperation(extensionId: ExtensionPointId, value: any): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tconst extension = this.findExtensionById(extensionId);\n\t\t\tif (extension) {\n\t\t\t\tconst worker = extension.worker;\n\t\t\t\tif (worker) {\n\t\t\t\t\tworker\n\t\t\t\t\t\t.sendBrowserOperation(extensionId, value)\n\t\t\t\t\t\t.then(() => resolve())\n\t\t\t\t\t\t.catch((e: Error) => reject(e));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treject(new Error(`Worker not found of extension[${extensionId}].`));\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport default ExtensionRegistry;\n"]}