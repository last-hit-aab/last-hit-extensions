{"version":3,"sources":["../lib/utils/platform.ts"],"names":[],"mappings":"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","file":"platform.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nconst LANGUAGE_DEFAULT = 'en';\n\nlet _isWindows = false;\nlet _isMacintosh = false;\nlet _isLinux = false;\nlet _isNative = false;\nlet _isWeb = false;\nlet _locale: string | undefined = undefined;\nlet _language: string = LANGUAGE_DEFAULT;\nlet _translationsConfigFile: string | undefined = undefined;\nlet _userAgent: string | undefined = undefined;\n\ninterface NLSConfig {\n\tlocale: string;\n\tavailableLanguages: { [key: string]: string };\n\t_translationsConfigFile: string;\n}\n\nexport interface IProcessEnvironment {\n\t[key: string]: string;\n}\n\ninterface INodeProcess {\n\tplatform: string;\n\tenv: IProcessEnvironment;\n\tgetuid(): number;\n\tnextTick: Function;\n\tversions?: {\n\t\telectron?: string;\n\t};\n\ttype?: string;\n}\ndeclare const process: INodeProcess;\ndeclare const global: any;\n\ninterface INavigator {\n\tuserAgent: string;\n\tlanguage: string;\n}\ndeclare const navigator: INavigator;\ndeclare const self: any;\n\nconst isElectronRenderer =\n\ttypeof process !== 'undefined' &&\n\ttypeof process.versions !== 'undefined' &&\n\ttypeof process.versions.electron !== 'undefined' &&\n\tprocess.type === 'renderer';\n\n// OS detection\nif (typeof navigator === 'object' && !isElectronRenderer) {\n\t_userAgent = navigator.userAgent;\n\t_isWindows = _userAgent.indexOf('Windows') >= 0;\n\t_isMacintosh = _userAgent.indexOf('Macintosh') >= 0;\n\t_isLinux = _userAgent.indexOf('Linux') >= 0;\n\t_isWeb = true;\n\t_locale = navigator.language;\n\t_language = _locale;\n} else if (typeof process === 'object') {\n\t_isWindows = process.platform === 'win32';\n\t_isMacintosh = process.platform === 'darwin';\n\t_isLinux = process.platform === 'linux';\n\t_locale = LANGUAGE_DEFAULT;\n\t_language = LANGUAGE_DEFAULT;\n\tconst rawNlsConfig = process.env['VSCODE_NLS_CONFIG'];\n\tif (rawNlsConfig) {\n\t\ttry {\n\t\t\tconst nlsConfig: NLSConfig = JSON.parse(rawNlsConfig);\n\t\t\tconst resolved = nlsConfig.availableLanguages['*'];\n\t\t\t_locale = nlsConfig.locale;\n\t\t\t// VSCode's default language is 'en'\n\t\t\t_language = resolved ? resolved : LANGUAGE_DEFAULT;\n\t\t\t_translationsConfigFile = nlsConfig._translationsConfigFile;\n\t\t} catch (e) {}\n\t}\n\t_isNative = true;\n}\n\nexport const enum Platform {\n\tWeb,\n\tMac,\n\tLinux,\n\tWindows\n}\nexport function PlatformToString(platform: Platform) {\n\tswitch (platform) {\n\t\tcase Platform.Web:\n\t\t\treturn 'Web';\n\t\tcase Platform.Mac:\n\t\t\treturn 'Mac';\n\t\tcase Platform.Linux:\n\t\t\treturn 'Linux';\n\t\tcase Platform.Windows:\n\t\t\treturn 'Windows';\n\t}\n}\n\nlet _platform: Platform = Platform.Web;\nif (_isMacintosh) {\n\t_platform = Platform.Mac;\n} else if (_isWindows) {\n\t_platform = Platform.Windows;\n} else if (_isLinux) {\n\t_platform = Platform.Linux;\n}\n\nexport const isWindows = _isWindows;\nexport const isMacintosh = _isMacintosh;\nexport const isLinux = _isLinux;\nexport const isNative = _isNative;\nexport const isWeb = _isWeb;\nexport const platform = _platform;\nexport const userAgent = _userAgent;\n\nexport function isRootUser(): boolean {\n\treturn _isNative && !_isWindows && process.getuid() === 0;\n}\n\n/**\n * The language used for the user interface. The format of\n * the string is all lower case (e.g. zh-tw for Traditional\n * Chinese)\n */\nexport const language = _language;\n\nexport namespace Language {\n\texport function value(): string {\n\t\treturn language;\n\t}\n\n\texport function isDefaultVariant(): boolean {\n\t\tif (language.length === 2) {\n\t\t\treturn language === 'en';\n\t\t} else if (language.length >= 3) {\n\t\t\treturn language[0] === 'e' && language[1] === 'n' && language[2] === '-';\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\texport function isDefault(): boolean {\n\t\treturn language === 'en';\n\t}\n}\n\n/**\n * The OS locale or the locale specified by --locale. The format of\n * the string is all lower case (e.g. zh-tw for Traditional\n * Chinese). The UI is not necessarily shown in the provided locale.\n */\nexport const locale = _locale;\n\n/**\n * The translatios that are available through language packs.\n */\nexport const translationsConfigFile = _translationsConfigFile;\n\nconst _globals =\n\ttypeof self === 'object' ? self : typeof global === 'object' ? global : ({} as any);\nexport const globals: any = _globals;\n\ninterface ISetImmediate {\n\t(callback: (...args: any[]) => void): void;\n}\n\nexport const setImmediate: ISetImmediate = (function defineSetImmediate() {\n\tif (globals.setImmediate) {\n\t\treturn globals.setImmediate.bind(globals);\n\t}\n\tif (typeof process !== 'undefined' && typeof process.nextTick === 'function') {\n\t\treturn process.nextTick.bind(process);\n\t}\n\tconst _promise = Promise.resolve();\n\treturn (callback: (...args: any[]) => void) => _promise.then(callback);\n})();\n\nexport const enum OperatingSystem {\n\tWindows = 1,\n\tMacintosh = 2,\n\tLinux = 3\n}\nexport const OS = _isMacintosh\n\t? OperatingSystem.Macintosh\n\t: _isWindows\n\t? OperatingSystem.Windows\n\t: OperatingSystem.Linux;\n"]}