{"version":3,"sources":["../lib/extension-worker.ts"],"names":[],"mappings":"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","file":"extension-worker.js","sourcesContent":["import { ChildProcess, fork } from 'child_process';\nimport Emitter from 'events';\nimport net from 'net';\nimport * as Consts from './extension/consts';\nimport {\n\tIExtensionPoint,\n\tExtensionEvent,\n\tExtensionEventTypes,\n\tExtensionDataTransmittedEvent,\n\tExtensionRegisteredEvent,\n\tExtensionPointId,\n\tExtensionDataTransmittedIgnoreEvent,\n\tExtensionBrowserOperationEvent,\n\tExtensionTestLogEvent\n} from './types';\nimport * as objects from './utils/objects';\nimport * as platform from './utils/platform';\n\nexport const enum WorkerEvents {\n\tEXITED = 'exited',\n\tREGISTERED = 'registered',\n\tLOG = 'log',\n\tERROR_LOG = 'error-log',\n\tERROR = 'error',\n\tDATA = 'data',\n\tBROWSER = 'browser',\n\tTEST_LOG = 'test-log'\n}\ntype GenericListener = (...args: any[]) => void;\nexport type ChildProcessRegisteredListener = (error?: Error) => void;\nexport type ChildProcessExistListener = (code: number, signal: string, unexcepted: boolean) => void;\nexport type LogListener = (data: any) => void;\nexport type ErrorListener = (error: Error) => void;\nexport type DataListener = (data: any) => void;\nexport type BrowserOperationListener = (data: any) => void;\nexport type TestLogListener = (data: any) => void;\nexport interface IExtensionWorker {\n\tonce(event: WorkerEvents.REGISTERED, listener: ChildProcessRegisteredListener): this;\n\tonce(event: WorkerEvents.EXITED, listener: ChildProcessExistListener): this;\n\ton(event: WorkerEvents.LOG | WorkerEvents.ERROR_LOG, listener: LogListener): this;\n\toff(event: WorkerEvents.LOG | WorkerEvents.ERROR_LOG, listener: LogListener): this;\n\ton(event: WorkerEvents.ERROR, listener: ErrorListener): this;\n\toff(event: WorkerEvents.ERROR, listener: ErrorListener): this;\n\ton(event: WorkerEvents.DATA, listener: DataListener): this;\n\toff(event: WorkerEvents.DATA, listener: DataListener): this;\n\ton(event: WorkerEvents.BROWSER, listener: BrowserOperationListener): this;\n\toff(event: WorkerEvents.BROWSER, listener: BrowserOperationListener): this;\n\ton(event: WorkerEvents.TEST_LOG, listener: TestLogListener): this;\n\toff(event: WorkerEvents.TEST_LOG, listener: TestLogListener): this;\n}\n\nclass ExtensionWorker implements IExtensionWorker {\n\tprivate emitter: Emitter = new Emitter();\n\tprivate terminating: boolean = false;\n\tprivate childProcess: ChildProcess | null = null;\n\n\tpublic async start(extension: IExtensionPoint): Promise<void> {\n\t\tif (this.terminating) {\n\t\t\t// .terminate() was called\n\t\t\treturn Promise.reject('Terminating...');\n\t\t}\n\n\t\tconst opts = {\n\t\t\tenv: objects.mixin(objects.deepClone(process.env), {\n\t\t\t\t// IMPORTANT relative path to \"./extension/bootstrap\"\n\t\t\t\t[Consts.ARG_ENTRY_POINT]: './index.js',\n\t\t\t\t[Consts.ARG_PACKAGE_FOLDER]: extension.getFolder(),\n\t\t\t\t[Consts.ARG_HANDLES_UNCAUGHT_ERRORS]: true,\n\t\t\t\t[Consts.ARG_EXTENSION_ID]: extension.getId(),\n\t\t\t\t[Consts.ARG_IN_IDE]: !!process.versions.electron\n\t\t\t}),\n\t\t\t// We only detach the extension host on windows. Linux and Mac orphan by default\n\t\t\t// and detach under Linux and Mac create another process group.\n\t\t\t// We detach because we have noticed that when the renderer exits, its child processes\n\t\t\t// (i.e. extension host) are taken down in a brutal fashion by the OS\n\t\t\tdetached: !!platform.isWindows,\n\t\t\texecArgv: undefined as string[] | undefined,\n\t\t\tsilent: true\n\t\t};\n\n\t\t// IMPORTANT relative path to me\n\t\tthis.childProcess = fork(`${__dirname}/extension/bootstrap`, ['--type=extension'], opts);\n\n\t\t// Lifecycle\n\t\tthis.childProcess.on('error', this.onChildProcessError);\n\t\tthis.childProcess.on('exit', this.onChildProcessExit);\n\t\tthis.childProcess.on('message', this.onChildProcessMessageReceived);\n\t\tthis.childProcess.stdout!.on('data', this.onChildProcessStdout);\n\t\tthis.childProcess.stderr!.on('data', this.onChildProcessStderr);\n\t}\n\tprivate onChildProcessError = (error: Error): void => {\n\t\tthis.getEmitter().emit(WorkerEvents.ERROR, {\n\t\t\tname: error.name,\n\t\t\tmessage: error.message,\n\t\t\tstack: error.stack\n\t\t} as Error);\n\t};\n\tprivate onChildProcessExit = (code: number, signal: string): void => {\n\t\tif (this.terminating) {\n\t\t\tthis.getEmitter().emit(WorkerEvents.EXITED, code, signal, false);\n\t\t} else {\n\t\t\tthis.getEmitter().emit(WorkerEvents.EXITED, code, signal, true);\n\t\t}\n\t};\n\tprivate onChildProcessMessageReceived = (\n\t\tmessage: any,\n\t\tsendHandle: net.Socket | net.Server\n\t): void => {\n\t\tif (!message) {\n\t\t\tconsole.log('Empty message received, ignore.');\n\t\t\treturn;\n\t\t}\n\t\tconst data = message as ExtensionEvent;\n\t\tswitch (true) {\n\t\t\tcase data.extensionId && data.type === ExtensionEventTypes.DATA_TRANSMITTED:\n\t\t\t\tthis.emitter.emit(WorkerEvents.DATA, (data as ExtensionDataTransmittedEvent).data);\n\t\t\t\tbreak;\n\t\t\tcase data.extensionId && data.type === ExtensionEventTypes.REGISTERED:\n\t\t\t\tthis.emitter.emit(\n\t\t\t\t\tWorkerEvents.REGISTERED,\n\t\t\t\t\t(data as ExtensionRegisteredEvent).error\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase data.extensionId && data.type === ExtensionEventTypes.TEST_LOG:\n\t\t\t\tthis.emitter.emit(WorkerEvents.TEST_LOG, (data as ExtensionTestLogEvent).data);\n\t\t\t\tbreak;\n\t\t\tcase data.extensionId && data.type === ExtensionEventTypes.BROWSER_OPERATION:\n\t\t\t\tthis.emitter.emit(\n\t\t\t\t\tWorkerEvents.BROWSER,\n\t\t\t\t\t(data as ExtensionBrowserOperationEvent).data\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.error('Neither extension id nor type declared via message, ignore.');\n\t\t\t\tconsole.error(data);\n\t\t}\n\t};\n\tprivate onChildProcessStdout = (data: any): void => {\n\t\tthis.getEmitter().emit(WorkerEvents.LOG, this.asString(data));\n\t};\n\tprivate onChildProcessStderr = (data: any): void => {\n\t\tthis.getEmitter().emit(WorkerEvents.ERROR_LOG, this.asString(data));\n\t};\n\tprivate asString(data: any) {\n\t\tif (data) {\n\t\t\tif (data.toString) {\n\t\t\t\tdata = data.toString();\n\t\t\t}\n\t\t\tif (typeof data === 'string' && data.endsWith('\\n')) {\n\t\t\t\tdata = data.substr(0, data.length - 1);\n\t\t\t}\n\t\t}\n\t\treturn data;\n\t}\n\n\tprivate getEmitter() {\n\t\treturn this.emitter;\n\t}\n\tpublic terminate(): void {\n\t\tif (this.terminating) {\n\t\t\treturn;\n\t\t}\n\t\tthis.terminating = true;\n\t\tthis.clean();\n\t}\n\tprivate clean(): void {\n\t\tif (this.childProcess) {\n\t\t\tthis.childProcess.kill();\n\t\t\tthis.childProcess = null;\n\t\t}\n\t}\n\tonce(event: WorkerEvents, listener?: GenericListener): this {\n\t\tthis.emitter.once(event, listener!);\n\t\treturn this;\n\t}\n\ton(event: WorkerEvents, listener?: GenericListener): this {\n\t\tthis.emitter.on(event, listener!);\n\t\treturn this;\n\t}\n\toff(event: WorkerEvents, listener?: GenericListener): this {\n\t\tthis.emitter.off(event, listener!);\n\t\treturn this;\n\t}\n\tsendMessage(extensionId: ExtensionPointId, data: any): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (this.childProcess) {\n\t\t\t\tthis.childProcess.send(\n\t\t\t\t\t{\n\t\t\t\t\t\textensionId,\n\t\t\t\t\t\ttype: ExtensionEventTypes.DATA_TRANSMITTED,\n\t\t\t\t\t\tdata\n\t\t\t\t\t} as ExtensionDataTransmittedEvent,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\t(error: Error | null) => {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// child process not found, generate an ignore reply\n\t\t\t\tresolve();\n\t\t\t\tthis.getEmitter().emit(WorkerEvents.DATA, { ignore: true });\n\t\t\t}\n\t\t});\n\t}\n\tsendBrowserOperation(extensionId: ExtensionPointId, value: any): Promise<void> {\n\t\tlet data = value;\n\t\tif (data instanceof Error) {\n\t\t\tdata = {\n\t\t\t\terror: true,\n\t\t\t\tname: data.name,\n\t\t\t\tmessage: data.message\n\t\t\t\t// stack is not necessary, error always sent from browser to extension\n\t\t\t};\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (this.childProcess) {\n\t\t\t\tthis.childProcess.send(\n\t\t\t\t\t{\n\t\t\t\t\t\textensionId,\n\t\t\t\t\t\ttype: ExtensionEventTypes.BROWSER_OPERATION,\n\t\t\t\t\t\tdata\n\t\t\t\t\t} as ExtensionBrowserOperationEvent,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\t(error: Error | null) => {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport default ExtensionWorker;\n"]}