{"version":3,"sources":["../lib/types/index.ts"],"names":[],"mappings":";;AAyBA,IAAY,mBASX;AATD,WAAY,mBAAmB;IAC9B,gDAAyB,CAAA;IACzB,mDAA4B,CAAA;IAC5B,4DAAqC,CAAA;IACrC,8DAAuC,CAAA;IACvC,kCAAW,CAAA;IACX,8CAAuB,CAAA;IACvB,sCAAe,CAAA;IACf,4CAAqB,CAAA;AACtB,CAAC,EATW,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QAS9B;AA2JD;IAKC,4CAAY,UAAa,EAAE,MAAkC;QAC5D,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACtB,CAAC;IACD,qDAAQ,GAAR;QACC,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;IACnC,CAAC;IACD,oDAAO,GAAP;QACC,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;IAClC,CAAC;IACD,0DAAa,GAAb;QACC,OAAO,IAAI,CAAC,UAAU,CAAC;IACxB,CAAC;IACD,sDAAS,GAAT;QACC,OAAO,IAAI,CAAC,MAAM,CAAC;IACpB,CAAC;IAEF,yCAAC;AAAD,CAtBA,AAsBC,IAAA;AAtBqB,gFAAkC","file":"index.js","sourcesContent":["import { Extensions } from 'last-hit-types';\n\nexport type ExtensionPointId = string;\nexport interface IExtensionPoint {\n\tgetId(): ExtensionPointId;\n\tgetName(): string;\n\tgetDescription(): string;\n\tgetFolder(): string;\n}\nexport interface IExtensionEntryPointHelper {\n\tisInIDE(): boolean;\n\tsendMessage(data: any): Promise<void>;\n\tsendError(e: Error): Promise<void>;\n\tsendIgnore(): Promise<void>;\n\tsendBrowserOperation(\n\t\tdata: {\n\t\t\ttype: Extensions.BrowserOperationEventTypes;\n\t\t} & { [key in string]: any }\n\t): Promise<void>;\n\tsendTestLog(title: string, passed: boolean, level: number, message?: string): Promise<void>;\n\tonce(eventType: ExtensionEventTypes, handler: (value: any) => void): this;\n\ton(eventType: ExtensionEventTypes, handler: (value: any) => void): this;\n\toff(eventType: ExtensionEventTypes, handler: (value: any) => void): this;\n}\n\nexport enum ExtensionEventTypes {\n\tREGISTERED = 'registered',\n\tUNREGISTERED = 'unregitered',\n\tDATA_TRANSMITTED = 'data-transmitted',\n\tBROWSER_OPERATION = 'browser-operation',\n\tLOG = 'log',\n\tERROR_LOG = 'error-log',\n\tERROR = 'error',\n\tTEST_LOG = 'test-log'\n}\n\nexport interface ExtensionEvent {\n\ttype: ExtensionEventTypes;\n\textensionId: ExtensionPointId;\n}\nexport interface ExtensionRegisteredEvent extends ExtensionEvent {\n\ttype: ExtensionEventTypes.REGISTERED;\n\terror?: any;\n}\nexport type ExtensionRegisteredHandler = (event: ExtensionRegisteredEvent) => void;\n\nexport interface ExtensionUnregisteredEvent extends ExtensionEvent {\n\ttype: ExtensionEventTypes.UNREGISTERED;\n}\nexport type ExtensionUnregisteredHandler = (event: ExtensionUnregisteredEvent) => void;\n/** event is process by extension handler, and response data returned */\nexport interface ExtensionDataTransmittedEvent extends ExtensionEvent {\n\ttype: ExtensionEventTypes.DATA_TRANSMITTED;\n\tdata: any;\n}\n/** error occurs on extension handling */\nexport interface ExtensionDataTransmittedErrorEvent extends ExtensionDataTransmittedEvent {\n\ttype: ExtensionEventTypes.DATA_TRANSMITTED;\n\tdata: { error: Error };\n}\n/** event is ignored by extension */\nexport interface ExtensionDataTransmittedIgnoreEvent extends ExtensionDataTransmittedEvent {\n\ttype: ExtensionEventTypes.DATA_TRANSMITTED;\n\tdata: { ignore: true };\n}\nexport type ExtensionDataTransmittedHandler = (event: ExtensionDataTransmittedEvent) => void;\n\nexport type ExtensionBrowserOperationData = { type: Extensions.BrowserOperationEventTypes };\nexport type GetElementAttrValueData = ExtensionBrowserOperationData & {\n\ttype: 'get-element-attr-value';\n\tcsspath: string;\n\tattrName: string;\n\tpageUuid?: string;\n};\nexport type GetElementPropValueData = ExtensionBrowserOperationData & {\n\ttype: 'get-element-prop-value';\n\tcsspath: string;\n\tpropName: string;\n\tpageUuid?: string;\n};\nexport type WaitData = ExtensionBrowserOperationData & {\n\ttype: 'wait';\n\ttime: number;\n};\nexport type WaitForElementData = ExtensionBrowserOperationData & {\n\ttype: 'wait-element';\n\tcsspath: string;\n\tpageUuid?: string;\n\ttime: number;\n\toptions?: { visible: boolean; hidden: boolean };\n};\nexport type BrowserOperationReturnData = string | null;\nexport type BrowserOperationError = {\n\terror: true;\n\tname: string;\n\tmessage: string;\n};\nexport interface ExtensionBrowserOperationEvent extends ExtensionEvent {\n\ttype: ExtensionEventTypes.BROWSER_OPERATION;\n\tdata: // from extension to replayer\n\t| GetElementAttrValueData\n\t\t| GetElementPropValueData\n\t\t| WaitData\n\t\t| WaitForElementData\n\t\t// from replayer to extension\n\t\t| BrowserOperationReturnData\n\t\t| BrowserOperationError;\n}\nexport type ExtensionBrowserOperationHandler = (event: ExtensionBrowserOperationEvent) => void;\n\nexport interface ExtensionTestLogEvent extends ExtensionEvent {\n\ttype: ExtensionEventTypes.TEST_LOG;\n\tdata: { title: string; passed: boolean; level: number; message?: string };\n}\nexport type ExtensionTestLogHandler = (event: ExtensionTestLogEvent) => void;\n\nexport interface ExtensionLogEvent extends ExtensionEvent {\n\ttype: ExtensionEventTypes.LOG;\n\tdata: any;\n}\nexport type ExtensionLogHandler = (event: ExtensionLogEvent) => void;\n\nexport interface ExtensionErrorLogEvent extends ExtensionEvent {\n\ttype: ExtensionEventTypes.ERROR_LOG;\n\tdata: any;\n}\nexport type ExtensionErrorLogHandler = (event: ExtensionErrorLogEvent) => void;\n\nexport interface ExtensionErrorEvent extends ExtensionEvent {\n\ttype: ExtensionEventTypes.ERROR;\n\terror: Error;\n}\nexport type ExtensionErrorHandler = (event: ExtensionErrorEvent) => void;\n\nexport interface IExtensionRegistry {\n\tonce(event: ExtensionEventTypes.REGISTERED, handler: ExtensionRegisteredHandler): this;\n\ton(event: ExtensionEventTypes.REGISTERED, handler: ExtensionRegisteredHandler): this;\n\toff(event: ExtensionEventTypes.REGISTERED, handler: ExtensionRegisteredHandler): this;\n\n\tonce(event: ExtensionEventTypes.UNREGISTERED, handler: ExtensionUnregisteredHandler): this;\n\ton(event: ExtensionEventTypes.UNREGISTERED, handler: ExtensionUnregisteredHandler): this;\n\toff(event: ExtensionEventTypes.UNREGISTERED, handler: ExtensionUnregisteredHandler): this;\n\n\tonce(\n\t\tevent: ExtensionEventTypes.DATA_TRANSMITTED,\n\t\thandler: ExtensionDataTransmittedHandler\n\t): this;\n\ton(event: ExtensionEventTypes.DATA_TRANSMITTED, handler: ExtensionDataTransmittedHandler): this;\n\toff(\n\t\tevent: ExtensionEventTypes.DATA_TRANSMITTED,\n\t\thandler: ExtensionDataTransmittedHandler\n\t): this;\n\n\tonce(\n\t\tevent: ExtensionEventTypes.BROWSER_OPERATION,\n\t\thandler: ExtensionBrowserOperationHandler\n\t): this;\n\ton(\n\t\tevent: ExtensionEventTypes.BROWSER_OPERATION,\n\t\thandler: ExtensionBrowserOperationHandler\n\t): this;\n\toff(\n\t\tevent: ExtensionEventTypes.BROWSER_OPERATION,\n\t\thandler: ExtensionBrowserOperationHandler\n\t): this;\n\n\tonce(event: ExtensionEventTypes.TEST_LOG, handler: ExtensionTestLogHandler): this;\n\ton(event: ExtensionEventTypes.TEST_LOG, handler: ExtensionTestLogHandler): this;\n\toff(event: ExtensionEventTypes.TEST_LOG, handler: ExtensionTestLogHandler): this;\n\n\tonce(event: ExtensionEventTypes.LOG, handler: ExtensionLogHandler): this;\n\ton(event: ExtensionEventTypes.LOG, handler: ExtensionLogHandler): this;\n\toff(event: ExtensionEventTypes.LOG, handler: ExtensionLogHandler): this;\n\n\tonce(event: ExtensionEventTypes.ERROR_LOG, handler: ExtensionErrorLogHandler): this;\n\ton(event: ExtensionEventTypes.ERROR_LOG, handler: ExtensionErrorLogHandler): this;\n\toff(event: ExtensionEventTypes.ERROR_LOG, handler: ExtensionErrorLogHandler): this;\n\n\tonce(event: ExtensionEventTypes.ERROR, handler: ExtensionErrorHandler): this;\n\ton(event: ExtensionEventTypes.ERROR, handler: ExtensionErrorHandler): this;\n\toff(event: ExtensionEventTypes.ERROR, handler: ExtensionErrorHandler): this;\n}\n\nexport interface IExtensionEntryPointWrapper<T extends Extensions.IExtensionEntryPoint>\n\textends Extensions.IExtensionEntryPoint {\n\thandle(data: any): void;\n\tgetEntrypoint(): T;\n}\n\nexport abstract class AbstractExtensionEntryPointWrapper<T extends Extensions.IExtensionEntryPoint>\n\timplements IExtensionEntryPointWrapper<T> {\n\tprivate entrypoint: T;\n\tprivate helper: IExtensionEntryPointHelper;\n\n\tconstructor(entrypoint: T, helper: IExtensionEntryPointHelper) {\n\t\tthis.entrypoint = entrypoint;\n\t\tthis.helper = helper;\n\t}\n\tactivate(): Promise<void> {\n\t\treturn this.entrypoint.activate();\n\t}\n\tgetType(): Extensions.ExtensionTypes {\n\t\treturn this.entrypoint.getType();\n\t}\n\tgetEntrypoint(): T {\n\t\treturn this.entrypoint;\n\t}\n\tgetHelper() {\n\t\treturn this.helper;\n\t}\n\tabstract handle(data: any): void;\n}\n"]}