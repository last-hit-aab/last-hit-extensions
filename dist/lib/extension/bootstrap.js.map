{"version":3,"sources":["../lib/extension/bootstrap.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;;gGAGgG;AAChG,2DAA+C;AAC/C,+CAAmC;AAEnC,oDAAoD;AAEpD,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,kCAAkC,CAAC,EAAE;IAC3D,SAAS,CAAC,0BAA0B,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,kCAAkC,CAAC,CAAC,CAAC;CAC7F;AAED,oBAAoB;AACpB,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,2BAA2B,CAAC,EAAE;IACpD,CAAC;QACA,6BAA6B;QAC7B,aAAa;QACb,OAAO,CAAC,EAAE,CAAC,mBAAmB,EAAE,UAAC,GAAU;YAC1C,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,GAAG,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,sCAAsC;QACtC,aAAa;QACb,OAAO,CAAC,EAAE,CAAC,oBAAoB,EAAE,UAAC,MAA6B;YAC9D,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,MAAM,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,EAAE,CAAC;CACL;AAED,mCAAmC;AACnC,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE;IACvC,CAAC;QACA,IAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;QAE7D,IAAI,OAAO,SAAS,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;YACvD,WAAW,CAAC;gBACX,IAAI;oBACH,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,iEAAiE;iBAC7F;gBAAC,OAAO,CAAC,EAAE;oBACX,OAAO,CAAC,IAAI,EAAE,CAAC;iBACf;YACF,CAAC,EAAE,IAAI,CAAC,CAAC;SACT;IACF,CAAC,CAAC,EAAE,CAAC;CACL;AAED,2BAA2B;AAC3B,2BAA2B;AAE3B,4BAA4B;AAC5B,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE;IACxC,IAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;IAChE,IAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;IAC7D,IAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;IACzD,IAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAC7C,UAAU,CAAC,QAAQ,CAAC,EAAE,WAAW,aAAA,EAAE,aAAa,eAAA,EAAE,KAAK,EAAE,KAAK,KAAK,MAAM,EAAE,CAAC,CAAC;CAC7E;AAED;;;;;;;;;;;;;;EAcE;AACF,YAAY","file":"bootstrap.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as bootstrap from './bootstrap-utils';\nimport * as Consts from './consts';\n\n// console.log(`child process pid[${process.pid}]`);\n\nif (process.env[Consts.ARG_INJECT_NODE_MODULE_LOOKUP_PATH]) {\n\tbootstrap.injectNodeModuleLookupPath(process.env[Consts.ARG_INJECT_NODE_MODULE_LOOKUP_PATH]);\n}\n\n// Handle Exceptions\nif (process.env[Consts.ARG_HANDLES_UNCAUGHT_ERRORS]) {\n\t(() => {\n\t\t// Handle uncaught exceptions\n\t\t// @ts-ignore\n\t\tprocess.on('uncaughtException', (err: Error) => {\n\t\t\tconsole.error('Uncaught Exception: ', err);\n\t\t});\n\n\t\t// Handle unhandled promise rejections\n\t\t// @ts-ignore\n\t\tprocess.on('unhandledRejection', (reason: {} | null | undefined) => {\n\t\t\tconsole.error('Unhandled Promise Rejection: ', reason);\n\t\t});\n\t})();\n}\n\n// Terminate when parent terminates\nif (process.env[Consts.ARG_PARENT_PID]) {\n\t(() => {\n\t\tconst parentPid = Number(process.env[Consts.ARG_PARENT_PID]);\n\n\t\tif (typeof parentPid === 'number' && !isNaN(parentPid)) {\n\t\t\tsetInterval(() => {\n\t\t\t\ttry {\n\t\t\t\t\tprocess.kill(parentPid, 0); // throws an exception if the main process doesn't exist anymore.\n\t\t\t\t} catch (e) {\n\t\t\t\t\tprocess.exit();\n\t\t\t\t}\n\t\t\t}, 5000);\n\t\t}\n\t})();\n}\n\n// Configure Crash Reporter\n//configureCrashReporter();\n\n// Load commonjs entry point\nif (process.env[Consts.ARG_ENTRY_POINT]) {\n\tconst entrypoint = require(process.env[Consts.ARG_ENTRY_POINT]);\n\tconst packageFolder = process.env[Consts.ARG_PACKAGE_FOLDER];\n\tconst extensionId = process.env[Consts.ARG_EXTENSION_ID];\n\tconst inIDE = process.env[Consts.ARG_IN_IDE];\n\tentrypoint.activate({ extensionId, packageFolder, inIDE: inIDE === 'true' });\n}\n\n/*\nfunction configureCrashReporter() {\n\tconst crashReporterOptionsRaw = process.env['CRASH_REPORTER_START_OPTIONS'];\n\tif (typeof crashReporterOptionsRaw === 'string') {\n\t\ttry {\n\t\t\tconst crashReporterOptions = JSON.parse(crashReporterOptionsRaw);\n\t\t\tif (crashReporterOptions) {\n\t\t\t\tprocess['crashReporter'].start(crashReporterOptions);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n}\n*/\n//#endregion\n"]}