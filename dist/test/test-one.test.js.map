{"version":3,"sources":["../test/test-one.test.ts"],"names":[],"mappings":";;;;;AAAA,8CAAwB;AACxB,mDAAyC;AACzC,sCAQsB;AACtB,gEAA8D;AAE9D,IAAM,eAAe,GAA2B;IAC/C,IAAI,gCAAc,CAAC;QAClB,EAAE,EAAE,MAAM;QACV,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,QAAQ;QACrB,MAAM,EAAE,cAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,uBAAuB,CAAC;KACzD,CAAC;CACF,CAAC;AAEF,4BAA4B;AAC5B,8BAA8B;AAC9B,iDAAiD;AACjD,IAAM,YAAY,GAAG,UAAC,KAA+B;IACpD,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;IACjC,wBAAwB;IACxB,8EAA8E;IAC9E,2CAA2C;IAC3C,wEAAwE;IACxE,4BAA4B;IAC5B,kFAAkF;IAClF,uBAAuB;IACvB,KAAK;IACL,wFAAwF;IACxF,IAAM,WAAW,GAAG,MAAM,CAAC;IAC3B,eAAiB,CAAC,WAAW,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC;QAC3D,eAAiB,CAAC,WAAW,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC;AACF,IAAM,KAAK,GAAG,UAAC,KAAwB;IACtC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACnB,wBAAwB;IACxB,0DAA0D;IAC1D,yDAAyD;AAC1D,CAAC,CAAC;AACF,IAAM,UAAU,GAAG,UAAC,KAA6B;IAChD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACpB,CAAC,CAAC;AACF,IAAM,OAAO,GAAG,UAAC,KAA0B;IAC1C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACpB,CAAC,CAAC;AACF,eAAiB,CAAC,EAAE,CAAC,2BAAmB,CAAC,GAAG,EAAE,KAAK,CAAC;KAClD,EAAE,CAAC,2BAAmB,CAAC,SAAS,EAAE,UAAU,CAAC;KAC7C,EAAE,CAAC,2BAAmB,CAAC,KAAK,EAAE,OAAO,CAAC;KACtC,EAAE,CAAC,2BAAmB,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;AACnD,eAAiB,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;AAC3C,MAAM;AAEN,kCAAkC;AAClC,gBAAgB;AAChB,sBAAsB;AACtB,uBAAuB;AACvB,cAAc;AACd,MAAM;AACN,mCAAmC","file":"test-one.test.js","sourcesContent":["import path from 'path';\nimport ExtensionRegistry from '../index';\nimport {\n\tExtensionEventTypes,\n\tExtensionRegisteredEvent,\n\tIExtensionPoint,\n\tExtensionUnregisteredEvent,\n\tExtensionLogEvent,\n\tExtensionErrorLogEvent,\n\tExtensionErrorEvent\n} from '../lib/types';\nimport { ExtensionPoint } from '../lib/types/extension-point';\n\nconst extensionPonits: Array<IExtensionPoint> = [\n\tnew ExtensionPoint({\n\t\tid: 'id-1',\n\t\tname: 'name-1',\n\t\tdescription: 'desc-1',\n\t\tfolder: path.join(process.cwd(), '../test-one-extension')\n\t})\n];\n\n// let registrationResolve =\n// const registrationPromise =\n// test('test register extensions', async () => {\nconst onRegistered = (event: ExtensionRegisteredEvent): void => {\n\tconsole.log('registered', event);\n\t// expect.assertions(1);\n\t// expect(event.extensionId).toBeOneOf(extensionPonits.map(ep => ep.getId()));\n\t// expect(event.port).toBeWithin(1, 65535);\n\t// const onUnregistered = (event: ExtensionUnregisteredEvent): void => {\n\t// \t// expect.assertions(1);\n\t// \t// expect(event.extensionId).toBeOneOf(extensionPonits.map(ep => ep.getId()));\n\t// \tconsole.log(event);\n\t// };\n\t// ExtensionRegistry.on(ExtensionEventTypes.UNREGISTERED, onUnregistered).shutdownAll();\n\tconst extensionId = 'id-1';\n\tExtensionRegistry.sendMessage(extensionId, 'hello').finally(() => {\n\t\tExtensionRegistry.sendMessage(extensionId, 'hello world');\n\t});\n};\nconst onLog = (event: ExtensionLogEvent): void => {\n\tconsole.log(event);\n\t// expect.assertions(1);\n\t// expect(event.data).toBe('test-one-extension actived.');\n\t// ExtensionRegistry.off(ExtensionEventTypes.LOG, onLog);\n};\nconst onErrorLog = (event: ExtensionErrorLogEvent): void => {\n\tconsole.log(event);\n};\nconst onError = (event: ExtensionErrorEvent): void => {\n\tconsole.log(event);\n};\nExtensionRegistry.on(ExtensionEventTypes.LOG, onLog)\n\t.on(ExtensionEventTypes.ERROR_LOG, onErrorLog)\n\t.on(ExtensionEventTypes.ERROR, onError)\n\t.on(ExtensionEventTypes.REGISTERED, onRegistered);\nExtensionRegistry.startup(extensionPonits);\n// });\n\n// test('wait 10 seconds', () => {\n// \tconst x = 1;\n// \tsetTimeout(() => {\n// \t\texpect(x).toBe(1);\n// \t}, 10000);\n// });\n// test('test shutdown', () => {});\n"]}